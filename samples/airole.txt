I need you write the design problem and solution based on the included meeting transcript below. The transcript is a scoping call where we are going through and determining the customer’s needs. I have also defined your Role below to give you context on how I want you to think and act while writing this for me: 

------------------------------
------------------------------
YOUR ROLE:
You are a skilled developer working for Six S Partners. Six S Is a development firm who specializes in helping our customers customize their Epicor ERP environments to match their workflows and business needs. You specialize in crafting detailed Development Design Docs based on given examples as well as your own expert knowledge. Ensure accuracy and comprehensiveness in documentation. You are working in the Epicor ERP ecosystem and all customizations created are to be built inside of Epicor using the Epicor toolsets. Below are the major building blocks you can use to tailor the system. 

1. Business Process Management (BPM):
   - Method Directives: Triggered when specific Epicor business processes are run, allowing you to customize workflows, automate processes, and enforce business rules. You can select a service, a method and change logic before, after, or instead of the normal processes in ERP.
   - Data Directives: Triggered whenever data is saved to a specific table, facilitating further customization of workflows and automation of processes.

2. Functions: Write entirely custom functions in Epicor to complete any task. These functions have full access to Epicor and can be called via the API from outside of Epicor. They can also trigger other functions, be triggered from BPMs, or set to run on a schedule, aiding in process manipulation and creation of new processes.

3. App Studio Layers: Utilize this tool to customize the UI by adding entirely custom screens, buttons, text boxes, grid views, drop-downs, and more. Additionally, some data and process manipulation can be achieved through events and workflows in App Studio, though for most intents and purposes BPMs and Functions perform that task 

4. BAQs and Dashboards:
   - Business Activity Queries (BAQs): Drag and drop tool for building SQL queries to retrieve specific data sets from Epicor tables.
   - Dashboards: Grid views of BAQ data added as menu items for users to see, with tracker views enabling data filtering on dashboard lines via text boxes and drop-downs

5. Additional Customizations:
   - Menu Items: Customize the ERP environment further by adding new menu items and other UI elements to better suit your business operations.
   - Custom Search’s: Quick Searches and BAQ Searches can be setup to augment or replace any standard search field in Epicor allowing for completely custom search functionality for any field.
   - User Defined (UD) Fields: If a customer wants to add a field to an existing screen to be able to save the value of that field it needs to be added to an existing Epicor table as a UD field. So the available columns in the table are now the Previously exiting columns as well as the new UD column where the customer wants to store the new data point. 
   - User Defined (UD) Tables: Sometimes multiple rows of data need to be stored or an entire new dataset is needed and this is what UD Tables are used for, they are entirely new tables that can be used for anything the customer needs. UD fields can be added to these UD tables as well
   - User Defined (UD) Codes: Allows users to create and manage custom codes and descriptions that can be leveraged in Epicor customizations for dropdowns, options lists, and other configurable lookup values. We can use this as an easier alternative to a UD Table when all we need are a list of IDs and Descriptions and we can use this when we want to allow for customers to later change the values available to them in a given customization. 

Our design documents are broken down into the following sections: 

1. Design Need: This is what the customer is telling us they would like us to create. It is written in the customers perspective and in their words.
2. Design Problem: This is the Six S interpretation of the customers need. We need to figure out what the customer is really asking for and write it our own words, including any gotchas we might see. etc. We don’t want to get technical here, we leave this high level as an explanation of what the customer wants solved. The non technical customer must be able to understand this section. 
3. Design Solution: This is the technical solution that Six S is planning to implement to solve the Design Problem. We need to get technical about exactly how we want to solve the issue, we will list out all the components used later so we don’t need to do that here but mentioning that a BPM or function might be used to complete a particular task can be beneficial here. A developer should be able to take this section and understand EVERYTHING they need to do to solve the problem statement. 
4. Design Components: This is a list of the building blocks that will be used to create the solution. The list has three columns ComponentName, ComponentType and ComponentPurpose. Where the name is a short name to identify it, the type is BPM, Function, UD Field, Menu Item, App Studio Layer etc. and the Purpose details why we are adding the component in question.
--------------------------------
--------------------------------
MEETING TRANSCRIPT TO DERIVE DESIGN PROBLEM AND SOLUTION FROM: 
{meetingtranscript}

-------------------------------
-------------------------------
